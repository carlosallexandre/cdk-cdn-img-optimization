{
 "Resources": {
  "s3sampleoriginalimagebucket4852BAD1": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "aws-cdk:cr-owned:images/rio/:3bdf2b4c",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/s3-sample-original-image-bucket/Resource"
   }
  },
  "s3sampleoriginalimagebucketPolicy9E8A6858": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "s3sampleoriginalimagebucket4852BAD1"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "s3sampleoriginalimagebucket4852BAD1",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "s3sampleoriginalimagebucket4852BAD1",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "s3sampleoriginalimagebucket4852BAD1",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "s3sampleoriginalimagebucket4852BAD1",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/s3-sample-original-image-bucket/Policy/Resource"
   }
  },
  "s3sampleoriginalimagebucketAutoDeleteObjectsCustomResource4643C90D": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "s3sampleoriginalimagebucket4852BAD1"
    }
   },
   "DependsOn": [
    "s3sampleoriginalimagebucketPolicy9E8A6858"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/s3-sample-original-image-bucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "483ae06ed27ef8ca76e011264d772420593a6cfe8544759c306ef3b98c9e25be.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs12.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "s3sampleoriginalimagebucket4852BAD1"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.483ae06ed27ef8ca76e011264d772420593a6cfe8544759c306ef3b98c9e25be",
    "aws:asset:property": "Code"
   }
  },
  "DeployWebsiteAwsCliLayer17DBC421": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "e6b3c8169ff937ea363b0bb4d13b24b0a38c958c42318f72066e3e59f0148c2c.zip"
    },
    "Description": "/opt/awscli/aws"
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/DeployWebsite/AwsCliLayer/Resource",
    "aws:asset:path": "asset.e6b3c8169ff937ea363b0bb4d13b24b0a38c958c42318f72066e3e59f0148c2c.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "DeployWebsiteCustomResourceD116527B": {
   "Type": "Custom::CDKBucketDeployment",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
      "Arn"
     ]
    },
    "SourceBucketNames": [
     {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     }
    ],
    "SourceObjectKeys": [
     "4755a1512017ade557829b251fb4e87bbd0f33ef79f8b765d994f71c5c44e93b.zip"
    ],
    "DestinationBucketName": {
     "Ref": "s3sampleoriginalimagebucket4852BAD1"
    },
    "DestinationBucketKeyPrefix": "images/rio/",
    "Prune": true
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/DeployWebsite/CustomResource/Default"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "s3sampleoriginalimagebucket4852BAD1",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "s3sampleoriginalimagebucket4852BAD1",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "Roles": [
     {
      "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "f98b78092dcdd31f5e6d47489beb5f804d4835ef86a8085d0a2053cb9ae711da.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      "Arn"
     ]
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "DeployWebsiteAwsCliLayer17DBC421"
     }
    ],
    "Runtime": "python3.7",
    "Timeout": 900
   },
   "DependsOn": [
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
   ],
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
    "aws:asset:path": "asset.f98b78092dcdd31f5e6d47489beb5f804d4835ef86a8085d0a2053cb9ae711da",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "s3samplewebsitebucket187DC458": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/s3-sample-website-bucket/Resource"
   }
  },
  "s3samplewebsitebucketPolicyF987EBE5": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "s3samplewebsitebucket187DC458"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "s3samplewebsitebucket187DC458",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "s3samplewebsitebucket187DC458",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "s3samplewebsitebucket187DC458",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "s3samplewebsitebucket187DC458",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "websiteDeliveryDistributionOrigin1S3OriginC6307E67",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "s3samplewebsitebucket187DC458",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/s3-sample-website-bucket/Policy/Resource"
   }
  },
  "s3samplewebsitebucketAutoDeleteObjectsCustomResourceAB6674FF": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "s3samplewebsitebucket187DC458"
    }
   },
   "DependsOn": [
    "s3samplewebsitebucketPolicyF987EBE5"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/s3-sample-website-bucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "websiteDeliveryDistributionOrigin1S3OriginC6307E67": {
   "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
   "Properties": {
    "CloudFrontOriginAccessIdentityConfig": {
     "Comment": "Identity for ImgTransformationStackwebsiteDeliveryDistributionOrigin1E55DED0F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/websiteDeliveryDistribution/Origin1/S3Origin/Resource"
   }
  },
  "websiteDeliveryDistributionFCAA3114": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "Comment": "image optimization - sample website",
     "DefaultCacheBehavior": {
      "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
      "Compress": true,
      "TargetOriginId": "ImgTransformationStackwebsiteDeliveryDistributionOrigin1E55DED0F",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "DefaultRootObject": "index.html",
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Origins": [
      {
       "DomainName": {
        "Fn::GetAtt": [
         "s3samplewebsitebucket187DC458",
         "RegionalDomainName"
        ]
       },
       "Id": "ImgTransformationStackwebsiteDeliveryDistributionOrigin1E55DED0F",
       "S3OriginConfig": {
        "OriginAccessIdentity": {
         "Fn::Join": [
          "",
          [
           "origin-access-identity/cloudfront/",
           {
            "Ref": "websiteDeliveryDistributionOrigin1S3OriginC6307E67"
           }
          ]
         ]
        }
       }
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/websiteDeliveryDistribution/Resource"
   }
  },
  "s3transformedimagebucket6D81D5CB": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "LifecycleConfiguration": {
     "Rules": [
      {
       "ExpirationInDays": 90,
       "Status": "Enabled"
      }
     ]
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/s3-transformed-image-bucket/Resource"
   }
  },
  "s3transformedimagebucketPolicyFB92EE5E": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "s3transformedimagebucket6D81D5CB"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "s3transformedimagebucket6D81D5CB",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "s3transformedimagebucket6D81D5CB",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "imageDeliveryDistributionOrigin1S3OriginC00A52F5",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "s3transformedimagebucket6D81D5CB",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/s3-transformed-image-bucket/Policy/Resource"
   }
  },
  "s3transformedimagebucketAutoDeleteObjectsCustomResource66B8DB81": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "s3transformedimagebucket6D81D5CB"
    }
   },
   "DependsOn": [
    "s3transformedimagebucketPolicyFB92EE5E"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/s3-transformed-image-bucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "imageoptimizationServiceRoleB17BF31F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/image-optimization/ServiceRole/Resource"
   }
  },
  "imageoptimization4C49F079": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "615ca84034f410cdc9a3b948298b4f3007285a811a6c5507d9141ab9317d544f.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "imageoptimizationServiceRoleB17BF31F",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "originalImageBucketName": {
       "Ref": "s3sampleoriginalimagebucket4852BAD1"
      },
      "transformedImageCacheTTL": "max-age=31622400",
      "secretKey": "dde47533b2b2ca349a679ec407902134",
      "logTiming": "false",
      "transformedImageBucketName": {
       "Ref": "s3transformedimagebucket6D81D5CB"
      }
     }
    },
    "Handler": "index.handler",
    "MemorySize": 1500,
    "Runtime": "nodejs16.x",
    "Timeout": 60
   },
   "DependsOn": [
    "imageoptimizationServiceRoleB17BF31F"
   ],
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/image-optimization/Resource",
    "aws:asset:path": "asset.615ca84034f410cdc9a3b948298b4f3007285a811a6c5507d9141ab9317d544f",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "imageoptimizationLogRetentionFAE2ECE2": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "imageoptimization4C49F079"
       }
      ]
     ]
    },
    "RetentionInDays": 1
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/image-optimization/LogRetention/Resource"
   }
  },
  "imageoptimizationFunctionUrlB69FA2C7": {
   "Type": "AWS::Lambda::Url",
   "Properties": {
    "AuthType": "NONE",
    "TargetFunctionArn": {
     "Fn::GetAtt": [
      "imageoptimization4C49F079",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/image-optimization/FunctionUrl/Resource"
   }
  },
  "imageoptimizationinvokefunctionurlE8A29AF5": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunctionUrl",
    "FunctionName": {
     "Fn::GetAtt": [
      "imageoptimization4C49F079",
      "Arn"
     ]
    },
    "Principal": "*",
    "FunctionUrlAuthType": "NONE"
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/image-optimization/invoke-function-url"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:DeleteRetentionPolicy",
        "logs:PutRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "Roles": [
     {
      "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "558dc75fbdc793c8e2f64f85d2d7ed2cb820c727ec7e9b08666ad1af0103992e.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
   ],
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource",
    "aws:asset:path": "asset.558dc75fbdc793c8e2f64f85d2d7ed2cb820c727ec7e9b08666ad1af0103992e",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "customResourceMyProviderframeworkonEventServiceRoleC33AFC6A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/customResource/MyProvider/framework-onEvent/ServiceRole/Resource"
   }
  },
  "customResourceMyProviderframeworkonEventServiceRoleDefaultPolicyB8BF2474": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "customResourceMyProviderframeworkonEventServiceRoleDefaultPolicyB8BF2474",
    "Roles": [
     {
      "Ref": "customResourceMyProviderframeworkonEventServiceRoleC33AFC6A"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/customResource/MyProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "customResourceMyProviderframeworkonEventB3B3EFCC": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "a25ad9c0d11729e2a901249c21b3095a071174c6fc98296269154dcebbb42a08.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "customResourceMyProviderframeworkonEventServiceRoleC33AFC6A",
      "Arn"
     ]
    },
    "Description": "AWS CDK resource provider framework - onEvent (ImgTransformationStack/customResource/MyProvider)",
    "Environment": {
     "Variables": {
      "USER_ON_EVENT_FUNCTION_ARN": {
       "Fn::GetAtt": [
        "SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C",
        "Arn"
       ]
      }
     }
    },
    "Handler": "framework.onEvent",
    "Runtime": "nodejs12.x",
    "Timeout": 900
   },
   "DependsOn": [
    "customResourceMyProviderframeworkonEventServiceRoleDefaultPolicyB8BF2474",
    "customResourceMyProviderframeworkonEventServiceRoleC33AFC6A"
   ],
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/customResource/MyProvider/framework-onEvent/Resource",
    "aws:asset:path": "asset.a25ad9c0d11729e2a901249c21b3095a071174c6fc98296269154dcebbb42a08",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "customResourceMyProviderframeworkonEventLogRetentionF00436C8": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "customResourceMyProviderframeworkonEventB3B3EFCC"
       }
      ]
     ]
    },
    "RetentionInDays": 1
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/customResource/MyProvider/framework-onEvent/LogRetention/Resource"
   }
  },
  "customResourceResource14CCAC0E2": {
   "Type": "AWS::CloudFormation::CustomResource",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "customResourceMyProviderframeworkonEventB3B3EFCC",
      "Arn"
     ]
    },
    "Url": {
     "Fn::GetAtt": [
      "imageoptimizationFunctionUrlB69FA2C7",
      "FunctionUrl"
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/customResource/Resource1/Default"
   }
  },
  "SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc/ServiceRole/Resource"
   }
  },
  "SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "f807064fe516c5a26909bdda25af89cb4e09cc76786d6b54aadc8bafd5f415a2.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04",
      "Arn"
     ]
    },
    "Handler": "index.on_event",
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04"
   ],
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc/Resource",
    "aws:asset:path": "asset.f807064fe516c5a26909bdda25af89cb4e09cc76786d6b54aadc8bafd5f415a2",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcLogRetentionB0B969CA": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C"
       }
      ]
     ]
    },
    "RetentionInDays": 1
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc/LogRetention/Resource"
   }
  },
  "readwritebucketpolicyDCD4CB5F": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:s3:::",
          {
           "Ref": "s3sampleoriginalimagebucket4852BAD1"
          },
          "/*"
         ]
        ]
       }
      },
      {
       "Action": "s3:PutObject",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:s3:::",
          {
           "Ref": "s3transformedimagebucket6D81D5CB"
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "readwritebucketpolicyDCD4CB5F",
    "Roles": [
     {
      "Ref": "imageoptimizationServiceRoleB17BF31F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/read-write-bucket-policy/Resource"
   }
  },
  "urlRewriteD6DE1501": {
   "Type": "AWS::CloudFront::Function",
   "Properties": {
    "Name": "urlRewriteFunctionc8686f3674591d3fdb088e2d68d00eeeb616bdfdab",
    "AutoPublish": true,
    "FunctionCode": "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nfunction handler(event) {\n    var request = event.request;\n    var originalImagePath = request.uri;\n    //  validate, process and normalize the requested operations in query parameters\n    var normalizedOperations = {};\n    if (request.querystring) {\n        Object.keys(request.querystring).forEach(operation => {\n            switch (operation.toLowerCase()) {\n                case 'format': \n                    var SUPPORTED_FORMATS = ['auto', 'jpeg', 'webp', 'avif', 'png', 'svg', 'gif'];\n                    if (request.querystring[operation]['value'] && SUPPORTED_FORMATS.includes(request.querystring[operation]['value'].toLowerCase())) {\n                        var format = request.querystring[operation]['value'].toLowerCase(); // normalize to lowercase\n                        if (format === 'auto') {\n                            format = 'jpeg';\n                            if (request.headers['accept']) {\n                                if (request.headers['accept'].value.includes(\"avif\")) {\n                                    format = 'avif';\n                                } else if (request.headers['accept'].value.includes(\"webp\")) {\n                                    format = 'webp';\n                                } \n                            }\n                        }\n                        normalizedOperations['format'] = format;\n                    }\n                    break;\n                case 'width':\n                    if (request.querystring[operation]['value']) {\n                        var width = parseInt(request.querystring[operation]['value']);\n                        if (!isNaN(width) && (width > 0)) {\n                            // you can protect the Lambda function by setting a max value, e.g. if (width > 4000) width = 4000;\n                            normalizedOperations['width'] = width.toString();\n                        }\n                    }\n                    break;\n                case 'height':\n                    if (request.querystring[operation]['value']) {\n                        var height = parseInt(request.querystring[operation]['value']);\n                        if (!isNaN(height) && (height > 0)) {\n                            // you can protect the Lambda function by setting a max value, e.g. if (height > 4000) height = 4000;\n                            normalizedOperations['height'] = height.toString();\n                        }\n                    }\n                    break;\n                case 'quality':\n                    if (request.querystring[operation]['value']) {\n                        var quality = parseInt(request.querystring[operation]['value']);\n                        if (!isNaN(quality) && (quality > 0)) {\n                            if (quality > 100) quality = 100;\n                            normalizedOperations['quality'] = quality.toString();\n                        }\n                    }\n                    break;\n                default: break;\n            }\n        });\n        //rewrite the path to normalized version if valid operations are found\n        if (Object.keys(normalizedOperations).length > 0) {\n            // put them in order\n            var normalizedOperationsArray = [];\n            if (normalizedOperations.format) normalizedOperationsArray.push('format='+normalizedOperations.format);\n            if (normalizedOperations.quality) normalizedOperationsArray.push('quality='+normalizedOperations.quality);\n            if (normalizedOperations.width) normalizedOperationsArray.push('width='+normalizedOperations.width);\n            if (normalizedOperations.height) normalizedOperationsArray.push('height='+normalizedOperations.height);\n            request.uri = originalImagePath + '/' + normalizedOperationsArray.join(',');     \n        } else {\n            // If no valid operation is found, flag the request with /original path suffix\n            request.uri = originalImagePath + '/original';     \n        }\n\n    } else {\n        // If no query strings are found, flag the request with /original path suffix\n        request.uri = originalImagePath + '/original'; \n    }\n    // remove query strings\n    request['querystring'] = {};\n    return request;\n}\n",
    "FunctionConfig": {
     "Comment": "urlRewriteFunctionc8686f3674591d3fdb088e2d68d00eeeb616bdfdab",
     "Runtime": "cloudfront-js-1.0"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/urlRewrite/Resource"
   }
  },
  "ImageCachePolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab46036099": {
   "Type": "AWS::CloudFront::CachePolicy",
   "Properties": {
    "CachePolicyConfig": {
     "DefaultTTL": 86400,
     "MaxTTL": 31536000,
     "MinTTL": 0,
     "Name": {
      "Fn::Join": [
       "",
       [
        "ImgTransformationStackImageCachePolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab56294ACF-",
        {
         "Ref": "AWS::Region"
        }
       ]
      ]
     },
     "ParametersInCacheKeyAndForwardedToOrigin": {
      "CookiesConfig": {
       "CookieBehavior": "none"
      },
      "EnableAcceptEncodingBrotli": false,
      "EnableAcceptEncodingGzip": false,
      "HeadersConfig": {
       "HeaderBehavior": "none"
      },
      "QueryStringsConfig": {
       "QueryStringBehavior": "all"
      }
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/ImageCachePolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab/Resource"
   }
  },
  "ResponseHeadersPolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab4B9251C7": {
   "Type": "AWS::CloudFront::ResponseHeadersPolicy",
   "Properties": {
    "ResponseHeadersPolicyConfig": {
     "CorsConfig": {
      "AccessControlAllowCredentials": false,
      "AccessControlAllowHeaders": {
       "Items": [
        "*"
       ]
      },
      "AccessControlAllowMethods": {
       "Items": [
        "GET"
       ]
      },
      "AccessControlAllowOrigins": {
       "Items": [
        "*"
       ]
      },
      "AccessControlMaxAgeSec": 600,
      "OriginOverride": false
     },
     "CustomHeadersConfig": {
      "Items": [
       {
        "Header": "x-aws-image-optimization",
        "Override": true,
        "Value": "v1.0"
       },
       {
        "Header": "vary",
        "Override": true,
        "Value": "accept"
       }
      ]
     },
     "Name": "ImageResponsePolicy"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/ResponseHeadersPolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab/Resource"
   }
  },
  "imageDeliveryDistributionOrigin1S3OriginC00A52F5": {
   "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
   "Properties": {
    "CloudFrontOriginAccessIdentityConfig": {
     "Comment": "Identity for ImgTransformationStackimageDeliveryDistributionOrigin13D122748"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/imageDeliveryDistribution/Origin1/S3Origin/Resource"
   }
  },
  "imageDeliveryDistribution8CA0B45D": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "Comment": "image optimization - image delivery",
     "DefaultCacheBehavior": {
      "CachePolicyId": {
       "Ref": "ImageCachePolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab46036099"
      },
      "Compress": true,
      "FunctionAssociations": [
       {
        "EventType": "viewer-request",
        "FunctionARN": {
         "Fn::GetAtt": [
          "urlRewriteD6DE1501",
          "FunctionARN"
         ]
        }
       }
      ],
      "ResponseHeadersPolicyId": {
       "Ref": "ResponseHeadersPolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab4B9251C7"
      },
      "TargetOriginId": "ImgTransformationStackimageDeliveryDistributionOriginGroup13DB43B07",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "OriginGroups": {
      "Items": [
       {
        "FailoverCriteria": {
         "StatusCodes": {
          "Items": [
           403
          ],
          "Quantity": 1
         }
        },
        "Id": "ImgTransformationStackimageDeliveryDistributionOriginGroup13DB43B07",
        "Members": {
         "Items": [
          {
           "OriginId": "ImgTransformationStackimageDeliveryDistributionOrigin13D122748"
          },
          {
           "OriginId": "ImgTransformationStackimageDeliveryDistributionOrigin214EA4308"
          }
         ],
         "Quantity": 2
        }
       }
      ],
      "Quantity": 1
     },
     "Origins": [
      {
       "DomainName": {
        "Fn::GetAtt": [
         "s3transformedimagebucket6D81D5CB",
         "RegionalDomainName"
        ]
       },
       "Id": "ImgTransformationStackimageDeliveryDistributionOrigin13D122748",
       "OriginShield": {
        "Enabled": true,
        "OriginShieldRegion": "us-east-1"
       },
       "S3OriginConfig": {
        "OriginAccessIdentity": {
         "Fn::Join": [
          "",
          [
           "origin-access-identity/cloudfront/",
           {
            "Ref": "imageDeliveryDistributionOrigin1S3OriginC00A52F5"
           }
          ]
         ]
        }
       }
      },
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "https-only",
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": {
        "Fn::GetAtt": [
         "customResourceResource14CCAC0E2",
         "HostName"
        ]
       },
       "Id": "ImgTransformationStackimageDeliveryDistributionOrigin214EA4308",
       "OriginCustomHeaders": [
        {
         "HeaderName": "x-origin-secret-header",
         "HeaderValue": "dde47533b2b2ca349a679ec407902134"
        }
       ],
       "OriginShield": {
        "Enabled": true,
        "OriginShieldRegion": "us-east-1"
       }
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/imageDeliveryDistribution/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/3VSwW7CMAz9Fu4hGzBNu0IR2iQkUNF2rUJqOkOaoDgBoar/vqSt2qGx07Of7afnOFM+feGTkbjSWOanscI9r3ZOyBMLVFbRjFcLL0/gWHLQXdTC1iiUt4Hu8jZZCIKa0SyrcjgrcytBO96Wlj3BBBE44vMINVOi3OeCV0FxLW5gv8ASGs12qAsFzuiV19JFpg9C6x/y06rId7AFWyJFnZqhKHmVGgWx0OCwQxvVTCrj84M1wW61RHIW976R31gsUM+lBKKPPLhH1wwmcWAVB/7ruJN5aD0R8hsGL7/TFOhsNME7iDy8x9D0sBAe0RTE16ZIwUUHce3EkzNl6DfeSuhmu/iutLXmgkGMNQcJvyCsU3RnyVQ8SRY+hVTI51dKFDZXinob787esV5WNrKZ7XLivXLczugcW2fa5MCP9HSZvPLJG38eHQlxbH0wXgJPW/wBs+aqiaICAAA="
   },
   "Metadata": {
    "aws:cdk:path": "ImgTransformationStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "SampleWebsiteDomain": {
   "Description": "Sample website domain",
   "Value": {
    "Fn::GetAtt": [
     "websiteDeliveryDistributionFCAA3114",
     "DomainName"
    ]
   }
  },
  "SampleWebsiteS3Bucket": {
   "Description": "S3 bucket use by the sample website",
   "Value": {
    "Ref": "s3samplewebsitebucket187DC458"
   }
  },
  "OriginalImagesS3Bucket": {
   "Description": "S3 bucket where original images are stored",
   "Value": {
    "Ref": "s3sampleoriginalimagebucket4852BAD1"
   }
  },
  "ImageDeliveryDomain": {
   "Description": "Domain name of image delivery",
   "Value": {
    "Fn::GetAtt": [
     "imageDeliveryDistribution8CA0B45D",
     "DomainName"
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}